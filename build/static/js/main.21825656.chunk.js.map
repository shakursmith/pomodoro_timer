{"version":3,"sources":["utils/duration/index.js","pomodoro/BreakInterval.js","pomodoro/FocusInterval.js","pomodoro/PlayPause.js","utils/class-names/index.js","pomodoro/Timer.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","BreakInterval","props","className","data-testid","breakInterval","type","onClick","downByOne","upByOne","FocusInterval","focusInterval","downByFive","upByFive","PlayPause","role","aria-label","title","playPause","classNameToBoolean","oi","isTimerRunning","Object","entries","reduce","classes","value","concat","undefined","filter","join","stopSession","Timer","sessionDisplay","inSession","onBreak","display","sessionTitle","pausedLabel","isPaused","progressPercentage","timeRemainingState","progressBarStyle","width","style","givenSeconds","seconds","round","secondsToDuration","height","aria-valuemin","aria-valuemax","aria-valuenow","Pomodoro","useState","setIsTimerRunning","setIsPaused","setInSession","setOnBreak","breakIntervalState","setBreakIntervalState","focusIntervalState","setFocusIntervalState","setTimeRemainingState","alarm","Audio","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","play","prevState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21825656.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\nimport {minutesToDuration} from '../utils/duration';\n\n\nfunction BreakInterval(props) {\n\n    return (\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(props.breakInterval)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={props.downByOne}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={props.upByOne}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default BreakInterval;","import React from 'react';\nimport {minutesToDuration} from '../utils/duration';\n\nfunction FocusInterval(props) {\n\n    return (\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(props.focusInterval)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                onClick={props.downByFive}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                onClick={props.upByFive}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default FocusInterval;","import React from 'react';\nimport classNames from \"../utils/class-names\";\n\nfunction PlayPause(props) {\n\n    return (\n        <div className=\"row mb-5\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={props.playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !props.isTimerRunning,\n                  \"oi-media-pause\": props.isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={props.stopSession}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default PlayPause;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from 'react';\nimport { minutesToDuration, secondsToDuration} from '../utils/duration';\n\nfunction Timer(props) {\n    const sessionDisplay = (props.inSession || props.onBreak) ? {display: \"block\"} : {display: \"none\"}\n    const sessionTitle = (props.onBreak) ? `On Break for ${minutesToDuration(props.breakInterval)} minutes` : `Focusing for ${minutesToDuration(props.focusInterval)} minutes`;\n    const pausedLabel = props.isPaused ? <h2>Paused</h2> : null\n    const progressPercentage = props.onBreak ? (1-(props.timeRemainingState/(props.breakInterval*60)))*100 : (1-(props.timeRemainingState/(props.focusInterval*60)))*100 ;\n    const progressBarStyle = { width: progressPercentage + \"%\" }\n\n    \n\n    return (\n        <div style={sessionDisplay} className=\"mb-5\">\n            {/* TODO: This area should show only when a focus or break session is running or pauses */}\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n                    <h2 data-testid=\"session-title\">{sessionTitle}</h2>\n                    {/* TODO: Update message below to include time remaining in the current session */}\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\n                    {secondsToDuration(props.timeRemainingState)} remaining\n                    </p>\n                    {pausedLabel}\n                </div>\n            </div>\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                        aria-valuenow={progressPercentage} // TODO: Increase aria-valuenow as elapsed time increases\n                        style={progressBarStyle} // TODO: Increase width % as elapsed time increases\n                    />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Timer;","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakInterval from \"./BreakInterval\";\nimport FocusInterval from \"./FocusInterval\";\nimport PlayPause from \"./PlayPause\";\nimport Timer from \"./Timer\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [inSession, setInSession] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n  const [breakIntervalState, setBreakIntervalState] = useState(5)\n  const [focusIntervalState, setFocusIntervalState] = useState(25)\n  const [timeRemainingState, setTimeRemainingState] = useState(focusIntervalState*60)\n  const alarm = new Audio('https://actions.google.com/sounds/v1/alarms/alarm_clock.ogg');\n\n  const increaseByFive = () => {\n    if(inSession) return;\n    if (focusIntervalState === 60) return;\n    setFocusIntervalState((current) => current + 5)\n    setTimeRemainingState((current) => current + 300)\n  } \n  const decreaseByFive = () => {\n    if(inSession) return;\n    if (focusIntervalState === 5) return;\n    setFocusIntervalState((current) => current - 5)\n    setTimeRemainingState((current) => current - 300)\n  } \n  const increaseByOne = () => {\n    if(inSession) return;\n    if (breakIntervalState === 15) return;\n    setBreakIntervalState((current) => current + 1)\n  } \n  const decreaseByOne = () => {\n    if(inSession) return;\n    if (breakIntervalState === 1) return;\n    setBreakIntervalState((current) => current - 1)\n  }\n  \n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      setTimeRemainingState((current) => current - 1);\n      if (timeRemainingState <= 0) {\n        setIsPaused(() => !isPaused)\n        alarm.play();\n        if (onBreak === false) {\n          setOnBreak(() => !onBreak);\n          setTimeRemainingState(breakIntervalState*60);\n        } else {\n          setOnBreak(() => !onBreak);\n          setTimeRemainingState(focusIntervalState*60);\n        }\n      }\n\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  \n  function playPause() {\n    if (!isTimerRunning) setInSession(true);\n    if (inSession) setIsPaused((prevState) => !prevState);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n  \n  function stopSession() {\n    if (!inSession) return;\n    setInSession(false); setOnBreak(false); setIsPaused(false); setIsTimerRunning(false);\n    setTimeRemainingState(focusIntervalState*60)\n  }\n  \n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row mb-5\">\n        <FocusInterval focusInterval={focusIntervalState} inSession={inSession} upByFive={increaseByFive} downByFive={decreaseByFive} />\n        <BreakInterval breakInterval={breakIntervalState} upByOne={increaseByOne} downByOne={decreaseByOne} />\n      </div>\n      <PlayPause playPause={playPause} stopSession={stopSession} isTimerRunning={isTimerRunning} />\n      <Timer timeRemainingState={timeRemainingState} inSession={inSession} onBreak={onBreak} isPaused={isPaused} focusInterval={focusIntervalState} breakInterval={breakIntervalState} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container vh-100 d-flex flex-column justify-content-center\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <header className=\"App-header container mb-5\">\n              <h1>Pomodoro Timer</h1>\n            </header>\n            <Pomodoro />\n          </div>  \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}