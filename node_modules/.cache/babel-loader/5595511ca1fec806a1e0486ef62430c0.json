{"ast":null,"code":"import React from'react';import{minutesToDuration,secondsToDuration}from'../utils/duration';function Timer(props){var sessionDisplay=props.inSession||props.onBreak?{display:\"block\"}:{display:\"none\"};var sessionTitle=props.onBreak?\"On Break for \".concat(minutesToDuration(props.breakInterval),\" minutes\"):\"Focusing for \".concat(minutesToDuration(props.focusInterval),\" minutes\");var pausedLabel=props.isPaused?/*#__PURE__*/React.createElement(\"h2\",null,\"Paused\"):null;var progressPercentage=props.onBreak?(1-props.timeRemainingState/(props.breakInterval*60))*100:(1-props.timeRemainingState/(props.focusInterval*60))*100;var progressBarStyle={width:progressPercentage+\"%\"};return/*#__PURE__*/React.createElement(\"div\",{style:sessionDisplay,className:\"mb-5\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"h2\",{\"data-testid\":\"session-title\"},sessionTitle),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\",\"data-testid\":\"session-sub-title\"},secondsToDuration(props.timeRemainingState),\" remaining\"),pausedLabel)),/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"div\",{className:\"progress\",style:{height:\"20px\"}},/*#__PURE__*/React.createElement(\"div\",{className:\"progress-bar\",role:\"progressbar\",\"aria-valuemin\":\"0\",\"aria-valuemax\":\"100\",\"aria-valuenow\":progressPercentage// TODO: Increase aria-valuenow as elapsed time increases\n,style:progressBarStyle// TODO: Increase width % as elapsed time increases\n})))));}export default Timer;","map":{"version":3,"sources":["/Users/shakur/www/Pomodoro_Timer/src/pomodoro/Timer.js"],"names":["React","minutesToDuration","secondsToDuration","Timer","props","sessionDisplay","inSession","onBreak","display","sessionTitle","breakInterval","focusInterval","pausedLabel","isPaused","progressPercentage","timeRemainingState","progressBarStyle","width","height"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,iBAAT,CAA4BC,iBAA5B,KAAoD,mBAApD,CAEA,QAASC,CAAAA,KAAT,CAAeC,KAAf,CAAsB,CAClB,GAAMC,CAAAA,cAAc,CAAID,KAAK,CAACE,SAAN,EAAmBF,KAAK,CAACG,OAA1B,CAAqC,CAACC,OAAO,CAAE,OAAV,CAArC,CAA0D,CAACA,OAAO,CAAE,MAAV,CAAjF,CACA,GAAMC,CAAAA,YAAY,CAAIL,KAAK,CAACG,OAAP,wBAAkCN,iBAAiB,CAACG,KAAK,CAACM,aAAP,CAAnD,oCAAqGT,iBAAiB,CAACG,KAAK,CAACO,aAAP,CAAtH,YAArB,CACA,GAAMC,CAAAA,WAAW,CAAGR,KAAK,CAACS,QAAN,cAAiB,uCAAjB,CAAmC,IAAvD,CACA,GAAMC,CAAAA,kBAAkB,CAAGV,KAAK,CAACG,OAAN,CAAgB,CAAC,EAAGH,KAAK,CAACW,kBAAN,EAA0BX,KAAK,CAACM,aAAN,CAAoB,EAA9C,CAAJ,EAAwD,GAAxE,CAA8E,CAAC,EAAGN,KAAK,CAACW,kBAAN,EAA0BX,KAAK,CAACO,aAAN,CAAoB,EAA9C,CAAJ,EAAwD,GAAjK,CACA,GAAMK,CAAAA,gBAAgB,CAAG,CAAEC,KAAK,CAAEH,kBAAkB,CAAG,GAA9B,CAAzB,CAIA,mBACI,2BAAK,KAAK,CAAET,cAAZ,CAA4B,SAAS,CAAC,MAAtC,eAEI,2BAAK,SAAS,CAAC,UAAf,eACI,2BAAK,SAAS,CAAC,KAAf,eAEI,0BAAI,cAAY,eAAhB,EAAiCI,YAAjC,CAFJ,cAII,yBAAG,SAAS,CAAC,MAAb,CAAoB,cAAY,mBAAhC,EACCP,iBAAiB,CAACE,KAAK,CAACW,kBAAP,CADlB,cAJJ,CAOKH,WAPL,CADJ,CAFJ,cAaI,2BAAK,SAAS,CAAC,UAAf,eACI,2BAAK,SAAS,CAAC,KAAf,eACI,2BAAK,SAAS,CAAC,UAAf,CAA0B,KAAK,CAAE,CAAEM,MAAM,CAAE,MAAV,CAAjC,eACA,2BACI,SAAS,CAAC,cADd,CAEI,IAAI,CAAC,aAFT,CAGI,gBAAc,GAHlB,CAII,gBAAc,KAJlB,CAKI,gBAAeJ,kBAAoB;AALvC,CAMI,KAAK,CAAEE,gBAAkB;AAN7B,EADA,CADJ,CADJ,CAbJ,CADJ,CA8BH,CAED,cAAeb,CAAAA,KAAf","sourcesContent":["import React from 'react';\nimport { minutesToDuration, secondsToDuration} from '../utils/duration';\n\nfunction Timer(props) {\n    const sessionDisplay = (props.inSession || props.onBreak) ? {display: \"block\"} : {display: \"none\"}\n    const sessionTitle = (props.onBreak) ? `On Break for ${minutesToDuration(props.breakInterval)} minutes` : `Focusing for ${minutesToDuration(props.focusInterval)} minutes`;\n    const pausedLabel = props.isPaused ? <h2>Paused</h2> : null\n    const progressPercentage = props.onBreak ? (1-(props.timeRemainingState/(props.breakInterval*60)))*100 : (1-(props.timeRemainingState/(props.focusInterval*60)))*100 ;\n    const progressBarStyle = { width: progressPercentage + \"%\" }\n\n    \n\n    return (\n        <div style={sessionDisplay} className=\"mb-5\">\n            {/* TODO: This area should show only when a focus or break session is running or pauses */}\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n                    <h2 data-testid=\"session-title\">{sessionTitle}</h2>\n                    {/* TODO: Update message below to include time remaining in the current session */}\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\n                    {secondsToDuration(props.timeRemainingState)} remaining\n                    </p>\n                    {pausedLabel}\n                </div>\n            </div>\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                        aria-valuenow={progressPercentage} // TODO: Increase aria-valuenow as elapsed time increases\n                        style={progressBarStyle} // TODO: Increase width % as elapsed time increases\n                    />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}