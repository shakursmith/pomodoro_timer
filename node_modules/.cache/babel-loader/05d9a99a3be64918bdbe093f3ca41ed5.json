{"ast":null,"code":"var _jsxFileName = \"/Users/shakur/www/qualifiedChallenges/Pomodoro_Timer/src/pomodoro/Timer.js\";\nimport React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nfunction Timer(props) {\n  const progressPercentage = (1 - props.timeRemainingState / (props.focusInterval * 60)) * 100;\n  const progressWidth = {\n    width: progressPercentage + \"%\"\n  };\n  const sessionDisplay = props.inSession || props.onBreak ? {\n    display: \"block\"\n  } : {\n    display: \"none\"\n  };\n  const pausedLabel = props.isPaused ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 42\n    }\n  }, \"Paused\") : null;\n  const sessionTitle = props.onBreak ? `Breaking for ${minutesToDuration(props.breakInterval)} minutes` : `Focusing for ${minutesToDuration(props.focusInterval)} minutes`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: sessionDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 21\n    }\n  }, sessionTitle), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, secondsToDuration(props.timeRemainingState), \" remaining\"), pausedLabel)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressPercentage // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: progressWidth // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  })))));\n}\n\nexport default Timer;","map":{"version":3,"sources":["/Users/shakur/www/qualifiedChallenges/Pomodoro_Timer/src/pomodoro/Timer.js"],"names":["React","minutesToDuration","secondsToDuration","Timer","props","progressPercentage","timeRemainingState","focusInterval","progressWidth","width","sessionDisplay","inSession","onBreak","display","pausedLabel","isPaused","sessionTitle","breakInterval","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAoD,mBAApD;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,QAAMC,kBAAkB,GAAG,CAAC,IAAGD,KAAK,CAACE,kBAAN,IAA0BF,KAAK,CAACG,aAAN,GAAoB,EAA9C,CAAJ,IAAwD,GAAnF;AACA,QAAMC,aAAa,GAAG;AAAEC,IAAAA,KAAK,EAAEJ,kBAAkB,GAAG;AAA9B,GAAtB;AACA,QAAMK,cAAc,GAAIN,KAAK,CAACO,SAAN,IAAmBP,KAAK,CAACQ,OAA1B,GAAqC;AAACC,IAAAA,OAAO,EAAE;AAAV,GAArC,GAA0D;AAACA,IAAAA,OAAO,EAAE;AAAV,GAAjF;AACA,QAAMC,WAAW,GAAGV,KAAK,CAACW,QAAN,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAjB,GAAmC,IAAvD;AAEA,QAAMC,YAAY,GAAIZ,KAAK,CAACQ,OAAP,GAAmB,gBAAeX,iBAAiB,CAACG,KAAK,CAACa,aAAP,CAAsB,UAAzE,GAAsF,gBAAehB,iBAAiB,CAACG,KAAK,CAACG,aAAP,CAAsB,UAAjK;AAGA,sBACI;AAAK,IAAA,KAAK,EAAEG,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCM,YAAjC,CAFJ,eAII;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCd,iBAAiB,CAACE,KAAK,CAACE,kBAAP,CADlB,eAJJ,EAOKQ,WAPL,CADJ,CAFJ,eAaI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AACI,IAAA,SAAS,EAAC,cADd;AAEI,IAAA,IAAI,EAAC,aAFT;AAGI,qBAAc,GAHlB;AAII,qBAAc,KAJlB;AAKI,qBAAeb,kBALnB,CAKuC;AALvC;AAMI,IAAA,KAAK,EAAEG,aANX,CAM0B;AAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADJ,CADJ,CAbJ,CADJ;AA8BH;;AAED,eAAeL,KAAf","sourcesContent":["import React from 'react';\nimport { minutesToDuration, secondsToDuration} from '../utils/duration';\n\nfunction Timer(props) {\n    const progressPercentage = (1-(props.timeRemainingState/(props.focusInterval*60)))*100;\n    const progressWidth = { width: progressPercentage + \"%\" }\n    const sessionDisplay = (props.inSession || props.onBreak) ? {display: \"block\"} : {display: \"none\"}\n    const pausedLabel = props.isPaused ? <h2>Paused</h2> : null\n\n    const sessionTitle = (props.onBreak) ? `Breaking for ${minutesToDuration(props.breakInterval)} minutes` : `Focusing for ${minutesToDuration(props.focusInterval)} minutes`;\n    \n\n    return (\n        <div style={sessionDisplay}>\n            {/* TODO: This area should show only when a focus or break session is running or pauses */}\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n                    <h2 data-testid=\"session-title\">{sessionTitle}</h2>\n                    {/* TODO: Update message below to include time remaining in the current session */}\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\n                    {secondsToDuration(props.timeRemainingState)} remaining\n                    </p>\n                    {pausedLabel}\n                </div>\n            </div>\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                        aria-valuenow={progressPercentage} // TODO: Increase aria-valuenow as elapsed time increases\n                        style={progressWidth} // TODO: Increase width % as elapsed time increases\n                    />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}